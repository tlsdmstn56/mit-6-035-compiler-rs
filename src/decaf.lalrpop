use std::str::FromStr;
use crate::token::*;

grammar; match {
    r"//[^\n\r]*[\n\r]*" => { }, // Ignore C++-style comments
} else {
    r"\s*" => { }, // Ignore whitespaces 
    _ 
}

// macro for comma-separated tokens (without trailing comma)
// should have at least one
CommaAtLeast<T>: Vec<T> = { 
    <e:T> <r:("," <T>)*> => {
        let mut v = vec![e];
        v.extend(r);
        v
    }
};

// macro for comma-separated tokens (without trailing comma)
Comma<T>: Vec<T> = {
    <e:T?> => match e {
        None => Vec::new(),
        Some(e) => vec![e],
    },
    <e:T> <r:("," <T>)+> => {
        let mut v = vec![e];
        v.extend(r);
        v
    }
};

pub TProgram: Program = {
    "class" "Program" "{" <f: TFieldDecl*> <m: TMethodDecl*> "}" 
    	=> Program{
	    field_decls:f,
	    method_decls:m,
    }
};

TVarDecl: VarDecl = 
    <t:TType> <i:CommaAtLeast<TIdentifier>> ";" => VarDecl{type_: t, identifiers:i};

TStatement: Statement = {
    <l: TLocation> <a:TAssignOp> <e:TExpr> ";" => Statement::Assign(Assign{dst:l, op: a, val: e}),
    <m: TMethodCall> ";" => Statement::MethodCall(m),
    "if" "(" <c:TExpr> ")" <tb:TBlock> => Statement::IfElse(IfElse{cond:c, true_block: tb, false_block: None}),
    "if" "(" <c:TExpr> ")" <tb:TBlock> "else" <fb:TBlock> => Statement::IfElse(IfElse{cond:c, true_block: tb, false_block: Some(fb)}),
    "for" <i:TIdentifier> "=" <s:TExpr> "," <e:TExpr> <b:TBlock> => Statement::Loop(Loop{index_var:i, start:s, end:e, block:b }),
    "return" <r:TExpr?> ";" => Statement::Return(Return{val: r}),
    "break" ";" => Statement::Break,
    "continue" ";" => Statement::Continue,
    <b:TBlock> => Statement::Block(b),
};

TBlock: Block = 
    "{" <v:TVarDecl*> <s:TStatement*>  "}" => Block{var_decls:v, statements: s};


TLocation: Location = {
    <i:TIdentifier> => Location{name: i, arr_size: None},
    <i:TIdentifier> "[" <a:TExpr> "]" => Location{name: i, arr_size: Some(a)},
};

TFieldDecl0: FieldDecl0 = {
    <i: TIdentifier> => FieldDecl0{name: i, arr_size: None},
    <i: TIdentifier> "[" <n:TIntLiteral> "]" => FieldDecl0{name: i, arr_size: Some(n)},
};

TFieldDecl: FieldDecl = {
    <t:TType> <l:CommaAtLeast<TFieldDecl0>> ";" => FieldDecl{ type_: t, loc: l},
};

TMethodName: MethodName = <s:TIdentifier> => s;

TIdentifier: Identifier = <s:r"[a-zA-Z_][a-zA-Z0-9_]*"> => s.to_string();

TExpr0: Expr = {
    <l: TLocation> => Box::new(Expr0::Location(l)),
    <l: TMethodCall> => Box::new(Expr0::MethodCall(l)),
    <l: TLiteral> => Box::new(Expr0::Literal(l)),
    "(" <l: TExpr> ")" => l,
    "-" <l: TExpr0> => Box::new(Expr0::Unary(Unary{expr:l, op:UnaryOp::NegInt})),
};

TExpr1: Expr = {
    "!" <l: TExpr0> => Box::new(Expr0::Unary(Unary{expr:l, op:UnaryOp::NegBool})),
    TExpr0,
};

TExpr2: Expr = {
    <lhs: TExpr2> "*" <rhs:TExpr1> =>Box::new(Expr0::Binary(Binary{lhs: lhs, rhs: rhs, op:BinaryOp::Arith(ArithOp::Mul)})),
    <lhs: TExpr2> "/" <rhs:TExpr1> =>Box::new(Expr0::Binary(Binary{lhs: lhs, rhs: rhs, op:BinaryOp::Arith(ArithOp::Div)})),
    <lhs: TExpr2> "%" <rhs:TExpr1> =>Box::new(Expr0::Binary(Binary{lhs: lhs, rhs: rhs, op:BinaryOp::Arith(ArithOp::Mod)})),
    TExpr1,
};

TExpr3: Expr = {
    <lhs: TExpr3> "+" <rhs:TExpr2> =>Box::new(Expr0::Binary(Binary{lhs: lhs, rhs: rhs, op:BinaryOp::Arith(ArithOp::Add)})),
    <lhs: TExpr3> "-" <rhs:TExpr2> =>Box::new(Expr0::Binary(Binary{lhs: lhs, rhs: rhs, op:BinaryOp::Arith(ArithOp::Sub)})),
    TExpr2,
};

TExpr4: Expr = {
    <lhs: TExpr4> <op: TCompareOp> <rhs:TExpr3> => Box::new(Expr0::Binary(Binary{lhs: lhs, rhs: rhs, op:BinaryOp::Compare(op)})),
    TExpr3,                                         
};

TExpr5: Expr = {
    <lhs: TExpr5> <op: TEqOp> <rhs:TExpr4> => Box::new(Expr0::Binary(Binary{lhs: lhs, rhs: rhs, op:BinaryOp::Eq(op)})),
    TExpr4,
};
TExpr6: Expr = {
    <lhs: TExpr6> "&&" <rhs:TExpr5> => Box::new(Expr0::Binary(Binary{lhs: lhs, rhs: rhs, op:BinaryOp::Cond(CondOp::And)})),
    TExpr5,
};

TExpr7: Expr = {
    <lhs: TExpr7> "||" <rhs:TExpr6> => Box::new(Expr0::Binary(Binary{lhs: lhs, rhs: rhs, op:BinaryOp::Cond(CondOp::Or)})),
    TExpr6,
};
TExpr: Expr = {
    TExpr7,
};

TBinaryOp: BinaryOp = {
    <a: TArithOp> => BinaryOp::Arith(a),
    <a: TCompareOp> => BinaryOp::Compare(a),
    <a: TEqOp> => BinaryOp::Eq(a),
    <a: TCondOp> => BinaryOp::Cond(a),
};

TMethodCall: MethodCall = {
    <name: TMethodName> "(" <args: Comma<TExpr>> ")" => MethodCall::Method{
        name: name,
        args: args,
    },
    "callout" "(" <name: TStringLiteral> ")" => MethodCall::Callout{
        name: name,
        args: Vec::new(), 
    },
    "callout" "(" <name: TStringLiteral> "," <args: Comma<TCalloutArg>> ")" => MethodCall::Callout{
        name: name,
        args: args,
    },
};

TLiteral: Literal = {
    <l:TIntLiteral>  => Literal::Int(l),
    <l:TBoolLiteral> => Literal::Bool(l),
    <l:TCharLiteral> => Literal::Char(l),
};

TAssignOp: AssignOp = {
    "=" => AssignOp::Assign,
    "+=" => AssignOp::AddAssign,
    "-=" => AssignOp::SubAssign,
    "*=" => AssignOp::MulAssign,
    "/=" => AssignOp::DivAssign,
};

TType: Type = {
    "int" =>  Type::Int,
    "boolean" => Type::Bool,
};

TArithOp: ArithOp ={
    "+" =>    ArithOp::Add,
    "-" =>    ArithOp::Sub,
    "*" =>    ArithOp::Mul,
    "/" =>    ArithOp::Div,
    "%" =>    ArithOp::Mod,
};

TCompareOp: CompareOp = {
    "<" =>   CompareOp::LT,
    ">" =>   CompareOp::GT,
    "<=" =>  CompareOp::LE,
    ">=" =>  CompareOp::GE,
};

TEqOp:  EqOp = {
    "==" => EqOp::EQ,
    "!=" => EqOp::NE,
};

TCondOp: CondOp = {
    "||" => CondOp::Or,
    "&&" => CondOp::And,
};

TIntLiteral: IntLiteral = {
    <d:TDecimalLiteral> => d,
    <h:THexLiteral> => h,
};

TDecimalLiteral: DecimalLiteral = <s:r#"[0-9]+"#> => i32::from_str(&s).unwrap();

THexLiteral: HexLiteral = <s:r"0x[0-9a-fA-F]"> => i32::from_str_radix(&s[2..], 16).unwrap();

TBoolLiteral: BoolLiteral = {
    "true" =>   BoolLiteral::True,
    "false" =>  BoolLiteral::False,
};

TCharLiteral: CharLiteral = <s:r"'.'"> => s.as_bytes()[1 as usize] as char;

TStringLiteral: StringLiteral = <s:r#"".*""#> => String::from_str(&s[1..(s.len()-1)]).unwrap();

TCalloutArg: CalloutArg = {
    <t:TExpr> => CalloutArg::Expr(t),
    <s:TStringLiteral> => CalloutArg::StringLiteral(s),
};

TMethodArg: MethodArg = {
    <t:TType> <i: TIdentifier> => MethodArg {type_: t, name:i},
};

TMethodDecl: MethodDecl = {
    <r:TType> <name:TIdentifier> "(" <args:Comma<TMethodArg>> ")" <b:TBlock> => MethodDecl{
        return_type: r, 
        name: name,
        args: args,
        block: b,
    },
    "void" <name:TIdentifier> "(" <args:Comma<TMethodArg>> ")" <b:TBlock> => MethodDecl{
        return_type: Type::Void, 
        name: name,
        args: args,
        block: b,
    },
};
